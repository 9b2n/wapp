<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.test.mapper.LectureMapper">
    <select id="readBasicDataList" resultType="LectureDto">
        select * from lecture
    </select>
    <insert id="insertLecture">
        insert into lecture(lecCategory, lecName, lecPrice, lecRegDate, lecImg)
        VALUES(#{lectureDto.lecCategory}, #{lectureDto.lecName}, #{lectureDto.lecPrice}, #{lectureDto.lecRegDate}, #{lectureDto.lecImg})
    </insert>
    <delete id="deleteLecture">
        delete from lecture where lecNo = #{lecNo}
    </delete>
    <select id="readBasicDataByLecNo" resultType="LectureDto">
        select * from lecture where lecNo = #{lecNo}
    </select>
    <select id="readBasicDataByLecName" resultType="LectureDto">
        select * from lecture where lecName like "%#{lecName}%"
    </select>
    <select id="readBasicDataByLecCategory" resultType="LectureDto">
        select * from lecture where lecCategory = #{lecCategory}
    </select>
    <select id="readBasicDataByLecPrice" resultType="LectureDto">
        select * from lecture where lecPrice between #{minPrice} and #{maxPrice}
    </select>
    <update id="updateLecture">
        update lecture
        set lecName=#{updateDto.lecName}, lecCategory=#{updateDto.lecCategory}, lecImg=#{updateDto.lecImg}, lecPrice=#{updateDto.lecPrice}
        where lecNo = #{lecNo}
    </update>
    <select id="readBasicDataListByUserNo" resultType="LectureDto">
        select *
        from lecture
        where lecNo
                  in (select likes.lecNo
                      from user, likes
                      where user.userNo = likes.userNo and likes.userNo = #{userNo})
    </select>

    <select id="readAllLectureSortedByLikes" resultType="LectureDto">
        select lecture.lecNo, lecCategory, lecName, lecPrice, lecRegDate, lecImg from lecture left join likes on lecture.lecNo = likes.lecNo group by lecture.lecNo order by count(likeNo) desc;
    </select>
    <select id="readAllLectureSortedByRegDate" resultType="LectureDto">
        select * from lecture order by lecRegDate desc ;
    </select>
    <select id="readLectureSortedByLikes" resultType="LectureDto">
        select lecture.lecNo, lecCategory, lecName, lecPrice, lecRegDate, lecImg from lecture left join likes on lecture.lecNo = likes.lecNo where lecCategory=#{category} group by lecture.lecNo order by count(likeNo) desc;
    </select>
    <select id="readLectureSortedByRegDate" resultType="LectureDto">
        select * from lecture where lecCategory=#{category} order by lecRegDate desc ;

    <select id="readBasicDataListByRegDateDesc" resultType="LectureDto">
        select * from lecture order by lecRegDate desc
    </select>
    <update id="updateLike">
        update lecture
        set lecLike=#{lecLike}
        where lecNo=#{lecNo}
    </update>
    <select id="readBasicDataListNotInRec" resultType="LectureDto">
        select *
        from lecture
        where lecNo
                  not in (select lecNo
                          from recommended)
    </select>
    <select id="readBasicDataListInRec" resultType="LectureDto">
        select *
        from lecture
        where lecNo
                  in (select lecNo
                          from recommended)

    </select>
</mapper>
